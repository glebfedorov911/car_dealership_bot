import asyncio
import logging
import os
import sys

from dotenv import load_dotenv
from card import *
from user import *


load_dotenv()

TOKEN = os.getenv('TOKEN')

dp = Dispatcher()
auto = 0
model = 0
users = 0
person = 0
username = 0
who_use_func = 0
img = ''
login = False
is_admin = False

def create_keyboard_button(*args):
    kb = []
    for text in args:
        kb.append([KeyboardButton(text=text)])

    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True) 
    return keyboard

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    '''–§—É–Ω—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É'''
    global is_admin, login, person, img

    img = ''
    if login:
        if is_admin:
            keyboard = create_keyboard_button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏üöó', '–í—ã–π—Ç–∏üëã', '–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å')  
        else:
            keyboard = create_keyboard_button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏üöó', '–í—ã–π—Ç–∏üëã')
    else:
        keyboard = create_keyboard_button('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úçÔ∏è', '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—èüö™')

    await message.answer(f'–ü—Ä–∏–≤–µ—Ç!, {html.bold(message.from_user.full_name)}!\n–≠—Ç–æ –±–æ—Ç-–∞–≤—Ç–æ—Å–∞–ª–æ–Ω!\
    \n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—à–∏–Ω—ã –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!', reply_markup=keyboard)

@dp.message()
async def another_message(message: Message, bot: Bot) -> None:
    '''–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, —Ä–µ–≥–∏—Å—Ç–∏—Ä—É–µ—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    global login, auto, is_admin, users, person, img, username

    if message.photo and (img == '' or not message.caption or '#photo' not in message.caption):
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —ç—Ç–æ')
        return 

    if message.photo and '#photo' in message.caption and img != '':
        await bot.download(message.photo[-1], destination=f'media/{img}')
        await message.answer('–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
        return

    if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏üöó':
        if login:
            query_auto = db.select_data(name_table='car', data=['*'], where=False)
            auto = CardAuto(brand=-1, call="car", query=query_auto)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', reply_markup=auto.show())
        else:
            keyboard = create_keyboard_button('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úçÔ∏è', '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—èüö™')
            await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!!', reply_markup=keyboard)

    if message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úçÔ∏è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ email —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—ç–≥ #—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')

    if '#—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' in message.text:
        if not login:
            data = message.text.split('\n')
            if len(data) < 4:
                await message.answer('–í—ã –∑–∞–±—ã–ª–∏ —á—Ç–æ-—Ç–æ –≤–≤–µ—Å—Ç–∏!')
                return

            person = Person()
            select = {
                'name_table':'user', 
                'data':['username', 'email'], 
                'relate':'OR', 
                'where_data':{'username': data[1], 'email': data[3]}, 
                'where':True
            }
            username = data[1]

            username_email = db.select_data(**select)
            try:
                if username_email != []:
                    await message.answer('–î–∞–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ email —É–∂–µ –∑–∞–Ω—è—Ç—ã!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úçÔ∏è" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "/start")')
                    return
                else:
                    login = True
                    person.signup(username=data[1], password=data[2], email=data[3])

                    keyboard = create_keyboard_button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏üöó', '–í—ã–π—Ç–∏üëã')   

                    await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—åü•≥', reply_markup=keyboard)
            except:
                await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úçÔ∏è" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "/start")')
        else:
            await message.answer('–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')

    if message.text == '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—èüö™':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ email —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—ç–≥ #–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')

    if '#–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' in message.text:
        if not login:
            data = message.text.split('\n')
            username = ''
            email = ''

            if len(data) <= 3:
                data.append('')
                where_data = {'username': data[1], 'email': data[3]}
            if '@' in data[1]:
                where_data = {'email': data[1]}
                email = data[1]
            else:
                where_data = {'username': data[1], 'email': data[3]}
                username = data[1]
                email = data[3]
            
            username = data[1]

            select = {
                'name_table':'user', 
                'data':['is_admin'], 
                'relate':'OR', 
                'where_data':where_data, 
                'where':True
            }

            if db.select_data(**select) == []:
                is_admin = False
            else:
                is_admin = db.select_data(**select)[0][0] == 'True'
            
            try:
                if is_admin:
                    person = Admin()
                else:
                    person = Person()
                    is_admin = False

                if person.login(password=data[2], email=email, username=username):
                    login = True

                    if is_admin:
                        keyboard = create_keyboard_button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏üöó', '–í—ã–π—Ç–∏üëã', '–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å')
                        await message.answer('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —Ç—ç–≥–æ–º #–¥–æ–±–∞–≤–∏—Ç—å–∞–≤—Ç–æ owner brand img\n–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è #—É–¥–∞–ª–∏—Ç—å–∞–≤—Ç–æ brand_id\n–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å brand_id –Ω–∞–ø–∏—à–∏—Ç–µ #–ø–æ–∫–∞–∂–∏–∞–≤—Ç–æ', reply_markup=keyboard)
                        await message.answer('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —Ç—ç–≥–æ–º #–¥–æ–±–∞–≤–∏—Ç—å–º–æ–¥–µ–ª—å model type_of_body count_of_place type_of_engine img brand_id\n–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π #—É–¥–∞–ª–∏—Ç—å–º–æ–¥–µ–ª—å specifications_id\n–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π —Å brand_id –Ω–∞–ø–∏—à–∏—Ç–µ #–ø–æ–∫–∞–∂–∏–º–æ–¥–µ–ª–∏', reply_markup=keyboard)
                        await message.answer('!!! –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –ø–µ—Ä–µ–Ω–æ—Å –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ !!!', reply_markup=keyboard)
                    else:
                        keyboard = create_keyboard_button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏üöó', '–í—ã–π—Ç–∏üëã')

                    await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—åü•≥', reply_markup=keyboard)
                else:
                    await message.answer('–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úçÔ∏è" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "/start"')
            except:
                await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úçÔ∏è" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "/start")')

        else:
            if is_admin:
                keyboard = create_keyboard_button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏üöó', '–í—ã–π—Ç–∏üëã', '–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å')
            else:
                keyboard = create_keyboard_button('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏üöó', '–í—ã–π—Ç–∏üëã')     
            await message.answer('–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', reply_markup=keyboard)

    if message.text == '–í—ã–π—Ç–∏üëã':
        if login:
            login = False
            is_admin = False
            keyboard= create_keyboard_button('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úçÔ∏è', '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—èüö™')
            await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏!', reply_markup=keyboard)
        else:
            await message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—èüö™" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "/start")')

    if message.text == '–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å':
        if is_admin:
            query_admin = db.select_data(name_table='user', data=['*'], where=False)
            users = CardUser(call='admin', query=query_admin)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users.show())
    
    if '#–¥–æ–±–∞–≤–∏—Ç—å–∞–≤—Ç–æ' in message.text:
        if is_admin:
            try:
                data = message.text.split('\n')
                person.new_auto(owner=data[1], brand=data[2], img=data[3])
                img = data[3]
                await message.answer('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω! –°–∫–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Ç—ç–≥ #photo')
            except:
                await message.answer('–û—à–∏–±–∫–∞')
    
    if '#–ø–æ–∫–∞–∂–∏–∞–≤—Ç–æ' in message.text:
        if is_admin:
            try:
                await message.answer(str(person.show_auto()))
            except:
                await message.answer('–û—à–∏–±–∫–∞')

    if '#—É–¥–∞–ª–∏—Ç—å–∞–≤—Ç–æ' in message.text:
        if is_admin:
            try:
                data = message.text.split('\n')
                person.delete_auto(brand_id=data[1])
                await message.answer('–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª–µ–Ω!')
            except:
                await message.answer('–û—à–∏–±–∫–∞')

    if '#–¥–æ–±–∞–≤–∏—Ç—å–º–æ–¥–µ–ª—å' in message.text:
        if is_admin:
            try:
                data = message.text.split('\n')
                person.new_model(model=data[1], type_of_body=data[2], count_of_place=data[3], type_of_engine=data[4], img=data[5], brand_id=data[6])
                img = data[5]
                await message.answer('–ú–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°–∫–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Ç—ç–≥ #photo')
            except:
                await message.answer('–û—à–∏–±–∫–∞')
    
    if '#–ø–æ–∫–∞–∂–∏–º–æ–¥–µ–ª–∏' in message.text:
        if is_admin:
            try:
                await message.answer(str(person.show_model()))
            except:
                await message.answer('–û—à–∏–±–∫–∞')
    
    if '#—É–¥–∞–ª–∏—Ç—å–º–æ–¥–µ–ª—å' in message.text:
        if is_admin:
            try:
                data = message.text.split('\n')
                person.delete_model(specifications_id=data[1])
                await message.answer('–ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞!')
            except:
                await message.answer('–û—à–∏–±–∫–∞')

@dp.callback_query(F.data.startswith('admin_'))
async def answer_to_callback_admin(query: CallbackQuery, bot: Bot) -> None:
    global is_admin, person, users, who_use_func, username, login
    if is_admin:

        action = query.data.split('_')
        if action[1] == 'next':
            await query.message.edit_reply_markup(reply_markup=users.next())
        if action[1] == 'previous':
            await query.message.edit_reply_markup(reply_markup=users.previous())
        if action[1] == 'stay':
            keyboard = InlineKeyboardMarkup(inline_keyboard=users.show_option())
            who_use_func = action[2]
            is_admin_user_use_func = db.select_data(name_table='user', data=['is_admin'], where=True, relate='OR', where_data={'username':who_use_func})
            
            if is_admin_user_use_func[0][0] == 'True':
                await query.message.edit_reply_markup(reply_markup=keyboard)
                await query.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
            else:
                await query.message.edit_reply_markup(reply_markup=keyboard)
                await query.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')


        if action[1] == '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º':
            is_admin_user_use_func = db.select_data(name_table='user', data=['is_admin'], where=True, relate='OR', where_data={'username':who_use_func})

            if is_admin_user_use_func[0][0] == 'False':
                person.set_admin_user(who_use_func)
                await query.message.delete()
                await query.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å')
            else:
                await query.message.delete()
                await query.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å')

        if action[1] == '–°–Ω—è—Ç—å —Å –∞–¥–º–∏–Ω–∫–∏':
            is_admin_user_use_func = db.select_data(name_table='user', data=['is_admin'], where=True, relate='OR', where_data={'username':who_use_func})

            if is_admin_user_use_func[0][0] == 'True':
                person.unset_admin_user(who_use_func)
                await query.message.delete()
                await query.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è—Ç —Å –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å')
            else:
                await query.message.delete()
                await query.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å') 

        if action[1] == '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
            person.delete_user_account(who_use_func)
            del_msg = False

            if who_use_func == username:
                login = False
                is_admin = False
                del_msg = True
                await query.message.delete()
                await query.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!')

            query_admin = db.select_data(name_table='user', data=['*'], where=False)
            users = CardUser(call='admin', query=query_admin)

            if not del_msg:
                await query.message.delete()
            await query.message.edit_reply_markup(reply_markup=users.show())
            await query.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å')


@dp.callback_query(F.data.startswith('car_') | F.data.startswith('model_'))
async def answer_to_callback(query: CallbackQuery) -> None:
    global auto, model
    action = query.data.split('_')

    try:
        if action[1] == 'next':
            if action[0] == 'car':
                await query.message.edit_reply_markup(reply_markup=auto.next())
            else:
                await query.message.edit_reply_markup(reply_markup=model.next())

        if action[1] == 'previous':
            if action[0] == 'car':
                await query.message.edit_reply_markup(reply_markup=auto.previous())
            else:
                await query.message.edit_reply_markup(reply_markup=model.previous())

        if action[1] == 'stay':
            query_data = {
                'name_table': 'specifications',
                'data': ['*'],
                'relate': '',
                'where': True,
                'where_data': {'brand_id':action[2]},
            }

            if action[-1] == '-1': #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å
                query_model = db.select_data(**query_data)
                model = CardModel(brand=action[2], model=-1, call='model', query=query_model)
                await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è', reply_markup=model.show())
            else: #–µ—Å—Ç—å –º–æ–¥–µ–ª—å - –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–π
                query_data['relate'] = 'AND'
                query_data['where_data']['model'] = action[3]
                query_model = db.select_data(**query_data)
                show_caption_model = model.show_caption_model(query_model)
                await query.message.answer_photo(photo=FSInputFile(f'media/{show_caption_model[1]}', filename='car'), caption=show_caption_model[0])

    except:
        await query.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏üöó" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "/start")')

    await query.answer()

async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())